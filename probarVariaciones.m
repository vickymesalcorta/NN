
% PRUEBO PARA LA ARQUITECTURA [2,8,6,1]

params = struct(...
        'actFunct', 0, ...
        'expError', 0.01,...
        'eta', 0.3, ...
        'alpha', 0.1, ...
        'adaptInc', 0.0003, ...
        'adaptDec', 0.01, ...
        'adaptStep', 4, ...
        'arq', [2,8,6,1], ...
        'n', 2 ...
    );

% VARÍO ALPHA DE 0.1 A 0.9 

% for i = 0:8
%     m = main(params.actFunct,params.expError,params.eta,params.alpha+i*0.1,params.adaptInc, ...
%     params.adaptDec, params.adaptStep, params.arq, params.n);
%     save(['arq' num2str(params.arq) 'alpha' num2str(params.alpha+i*0.1) 'result.mat'], 'm');
% end

% VARÍO ETA DE 0.3 A 0.9

% for i = 0:6
%     m = main(params.actFunct,params.expError,params.eta+i*0.1,params.alpha,params.adaptInc, ...
%     params.adaptDec, params.adaptStep, params.arq, params.n);
%     save(['arq' num2str(params.arq) 'eta' num2str(params.eta+i*0.1) 'result.mat'], 'm');
% end

% VARÍO ADAPTATIVE DECREMENT DE 0.01 A 0.05

% for i = 0:4
%     m = main(params.actFunct,params.expError,params.eta,params.alpha,params.adaptInc, ...
%     params.adaptDec+i*00.1, params.adaptStep, params.arq, params.n);
%     save(['arq' num2str(params.arq) 'decrement' num2str(params.adaptDec+i*0.01) 'result.mat'], 'm');
% end

% VARÍO ADAPTATIVE INCREMENT DE 0.01 A 0.003 A 0.007

for i = 0:4
    m = main(params.actFunct,params.expError,params.eta,params.alpha,params.adaptInc+i*000.1, ...
    params.adaptDec, params.adaptStep, params.arq, params.n);
    save(['arq' num2str(params.arq) 'increment' num2str(params.adaptInc+i*0.0001) 'result.mat'], 'm');
end

% PRUEBO PARA LA ARQUITECTURA [2,8,6,1]

params = struct(...
        'actFunct', 0, ...
        'expError', 0.01,...
        'eta', 0.3, ...
        'alpha', 0.1, ...
        'adaptInc', 0.0003, ...
        'adaptDec', 0.01, ...
        'adaptStep', 4, ...
        'arq', [2,15,1], ...
        'n', 2 ...
    );

% for i = 0:8
%     m = main(params.actFunct,params.expError,params.eta,params.alpha+i*0.1,params.adaptInc, ...
%     params.adaptDec, params.adaptStep, params.arq, params.n);
%     save(['arq' num2str(params.arq) 'alpha' num2str(params.alpha+i*0.1) 'result.mat'], 'm');
% end

% for i = 0:6
%     m = main(params.actFunct,params.expError,params.eta+i*0.1,params.alpha,params.adaptInc, ...
%     params.adaptDec, params.adaptStep, params.arq, params.n);
%     save(['arq' num2str(params.arq) 'eta' num2str(params.eta+i*0.1) 'result.mat'], 'm');
% end


% for i = 0:4
%     m = main(params.actFunct,params.expError,params.eta,params.alpha,params.adaptInc, ...
%     params.adaptDec+i*00.1, params.adaptStep, params.arq, params.n);
%     save(['arq' num2str(params.arq) 'decrement' num2str(params.adaptDec+i*0.01) 'result.mat'], 'm');
% end

for i = 0:4
    m = main(params.actFunct,params.expError,params.eta,params.alpha,params.adaptInc+i*000.1, ...
    params.adaptDec, params.adaptStep, params.arq, params.n);
    save(['arq' num2str(params.arq) 'increment' num2str(params.adaptInc+i*0.0001) 'result.mat'], 'm');
end

% for i = 0:6
%     m = main(params.actFunct,params.expError,params.eta+i*0.1,params.alpha,params.adaptInc, ...
%     params.adaptDec, params.adaptStep, params.arq, params.n);
%     save(['arq' num2str(params.arq) 'eta' num2str(params.eta+i*0.1) 'result.mat'], 'm');
% end




params = struct(...
        'actFunct', 0, ...
        'expError', 0.01,...
        'eta', 0.1, ...
        'alpha', 0.1, ...
        'adaptInc', 0.0003, ...
        'adaptDec', 0.01, ...
        'adaptStep', 4, ...
        'arq', [2,8,6,1], ...
        'n', 2 ...
    );

% COMO EN LAS PRUEBAS ANTERIORES EL MEJOR ERA 0.3, VARÍO EL ETA DE 0.1 a 0.3 a ver si da mejor
for i = 0:2
    m = main(params.actFunct,params.expError,params.eta+i*0.1,params.alpha,params.adaptInc, ...
    params.adaptDec, params.adaptStep, params.arq, params.n);
    save(['arq' num2str(params.arq) 'eta' num2str(params.eta+i*0.1) 'result.mat'], 'm');
end


params = struct(...
        'actFunct', 0, ...
        'expError', 0.01,...
        'eta', 0.3, ...
        'alpha', 0.1, ...
        'adaptInc', 0.0003, ...
        'adaptDec', 0.01, ...
        'adaptStep', 4, ...
        'arq', [2,15,1], ...
        'n', 2 ...
    );

% COMO EN LAS PRUEBAS ANTERIORES EL MEJOR ERA 0.3, VARÍO EL ETA DE 0.1 a 0.3 a ver si da mejor
for i = 0:2
    m = main(params.actFunct,params.expError,params.eta+i*0.1,params.alpha,params.adaptInc, ...
    params.adaptDec, params.adaptStep, params.arq, params.n);
    save(['arq' num2str(params.arq) 'eta' num2str(params.eta+i*0.1) 'result.mat'], 'm');
end



% PRUEBO DISTINTAS FUNCIONES DE ACTIVACIÓN

params = struct(...
        'actFunct', 0, ...
        'expError', 0.01,...
        'eta', 0.3, ...
        'alpha', 0.9, ...
        'adaptInc', 0.0003, ...
        'adaptDec', 0.01, ...
        'adaptStep', 4, ...
        'arq', [2,8,6,1], ...
        'n', 2 ...
    );

    m = main(params.actFunct,params.expError,params.eta,params.alpha,params.adaptInc, ...
    params.adaptDec, params.adaptStep, params.arq, params.n);
    save(['arq' num2str(params.arq) 'act func' num2str(params.actFunct) 'result.mat'], 'm');

params = struct(...
        'actFunct', 1, ...
        'expError', 0.01,...
        'eta', 0.3, ...
        'alpha', 0.9, ...
        'adaptInc', 0.0003, ...
        'adaptDec', 0.01, ...
        'adaptStep', 4, ...
        'arq', [2,8,6,1], ...
        'n', 2 ...
    );


    m = main(params.actFunct,params.expError,params.eta,params.alpha,params.adaptInc, ...
    params.adaptDec, params.adaptStep, params.arq, params.n);
    save(['arq' num2str(params.arq) act funceta' num2str(params.actFunct) 'result.mat'], 'm');

